Parallelism:
class GetAllBooksAndAuthorsUseCase(
    private val booksRepository: BooksRepository,
    private val authorsRepository: AuthorsRepository,
) {
    suspend fun getBookAndAuthors(): BookAndAuthors {
        // In parallel, fetch books and authors and return when both requests
        // complete and the data is ready
        return coroutineScope {
            val books = async { booksRepository.getAllBooks() }
            val authors = async { authorsRepository.getAllAuthors() }
            BookAndAuthors(books.await(), authors.await())
        }
    }
}

use SharingStarted.Lazily instead of SharingStarted.WhileSubscribed if you want to keep the value of the flow when the app is in the background

add foreground service mode for reminder notifications

user runBlocking to run suspend functions synchronously

use lazy initialization for expensive object creation

use database indexes


Avoid switch statements by using polymorphism
because switch statements are not extensible, and they violate the open/closed principle.
so when you add a new type, you have to modify the switch statements throughout the application to handle the new type.
example:
```
interface Shape {
    fun draw()
    fun rotate()
}

class Circle : Shape {
    override fun draw() {
        println("Drawing a circle")
    }

    override fun rotate() {
        println("Rotating a circle")
    }
}

class Square : Shape {
    override fun draw() {
        println("Drawing a square")
    }

    override fun rotate() {
        println("Rotating a square")
    }
}
```

Rather than:
```
fun draw(shape: Shape) {
    when (shape) {
        is Circle -> shape.draw()
        is Square -> shape.draw()
    }
}
```

Clean Code Principals:

Command and query separation:
- A function should either do something or answer something, but not both.
- A function that returns a value should not change the state of the system.
- A function that changes the state of the system should not return a value.
- This separation makes your code easier to understand and maintain.

Single responsibility principle:
- A class should have only one reason to change.
- If a class has more than one responsibility, it should be split into multiple classes.

Open/closed principle:
- A class should be open for extension but closed for modification.
- You should be able to add new functionality to a class without modifying its existing code.

Liskov substitution principle:
- Objects of a superclass should be replaceable with objects of its subclasses without affecting the correctness of the program.
- If you have a function that takes a superclass as a parameter, you should be able to pass a subclass to that function without any issues.

Interface segregation principle:
- A client should not be forced to implement an interface that it does not use.
- Instead of having one large interface, you should have multiple smaller interfaces that are specific to the classes that implement them.

Dependency inversion principle:
- High-level modules should not depend on low-level modules. Both should depend on abstractions.
- Abstractions should not depend on details. Details should depend on abstractions.
